import logging
from .data import P, R, C, Logger, LogLevel, MethodLogParams, LogParams
from .defaults import DEFAULTS as DEFAULTS
from typing import Callable, Optional, Union
from typing_extensions import Unpack

def get_logger(logger: Optional[Logger]) -> logging.Logger: ...
def wrap_function(f: Callable[P, R], logger: Optional[Logger] = ..., level: Optional[LogLevel] = ..., **params: Unpack[MethodLogParams]) -> Callable[P, R]: ...
def get_method_log_params(p: Optional[Union[MethodLogParams, bool, LogLevel]], none_is_true: bool = ...) -> Optional[MethodLogParams]: ...
def wrap_class(cls: C, level: Optional[LogLevel] = ..., logger: Optional[Logger] = ..., log_init: Optional[Union[LogParams, bool, LogLevel]] = ..., log_methods: Optional[Union[MethodLogParams, bool, LogLevel]] = ..., log_prvt_mthd: Optional[Union[MethodLogParams, bool, LogLevel]] = ...) -> C: ...
